name: Release

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write

jobs:
  ci:
    name: Check Format, Lint, Test, and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check Format (Prettier)
        run: bun run pretty:check

      - name: Run Linter
        run: bun run lint

      - name: Run Tests
        run: bun run test

      - name: Build Project
        run: bun run build

  tag_release:
    name: Tag Release
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Auto-increment version
        id: version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag -a v${{ env.NEW_VERSION }} -m "Release v${{ env.NEW_VERSION }}"
          git push origin v${{ env.NEW_VERSION }}

  release:
    name: Generate GitHub Release
    needs: tag_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Set Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Fetch Tags
        run: git fetch --tags --force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "Release v${{ env.NEW_VERSION }}"
          generate_release_notes: true
          draft: false
          prerelease: contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'rc')
